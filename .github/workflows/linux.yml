name: Linux

on:
  push:
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      pkgrel:
        description: pkgrel
        type: number
        required: true

jobs:
  linux:
    name: Rocky Linux 8
    runs-on: ubuntu-latest

    env:
      ONLY_CACHE: "false"
      IMAGE_TAG: tdesktop:centos_env

    steps:
      - name: Clone.
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: First set up.
        run: |
          sudo apt update
          curl -sSL https://install.python-poetry.org | python3 -
          cd Telegram/build/docker/centos_env
          poetry install
          DOCKERFILE=$(DEBUG= LTO= poetry run gen_dockerfile)
          echo "$DOCKERFILE" > Dockerfile
          echo "TAGNAME=$(curl -s "${{ github.api_url }}/repos/${{ github.repository }}/tags" | jq -r '.[0].name')" >> $GITHUB_ENV

      - name: Free up some disk space.
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be
        with:
          tool-cache: true

      - name: Set up Docker Buildx.
        uses: docker/setup-buildx-action@v3

      - name: Libraries cache.
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/.buildx-cache
          key: ${{ runner.OS }}-libs-${{ hashFiles('Telegram/build/docker/centos_env/**') }}
          restore-keys: ${{ runner.OS }}-libs-

      - name: Libraries.
        uses: docker/build-push-action@v6
        with:
          context: Telegram/build/docker/centos_env
          load: ${{ env.ONLY_CACHE == 'false' }}
          tags: ${{ env.IMAGE_TAG }}
          cache-from: type=local,src=${{ runner.temp }}/.buildx-cache
          cache-to: type=local,dest=${{ runner.temp }}/.buildx-cache-new,mode=max

      - name: Move cache.
        run: |
          rm -rf ${{ runner.temp }}/.buildx-cache
          mv ${{ runner.temp }}/.buildx-cache{-new,}

      - name: materialgram build.
        if: env.ONLY_CACHE == 'false'
        run: |
          echo "ARTIFACT_NAME=materialgram" >> $GITHUB_ENV

          docker run --rm \
          -u $(id -u) \
          -v $PWD:/usr/src/tdesktop \
          $IMAGE_TAG \
          /usr/src/tdesktop/Telegram/build/docker/centos_env/build.sh \
          -D CMAKE_CONFIGURATION_TYPES=Release \
          -D TDESKTOP_API_ID=${{ secrets.API_ID }} \
          -D TDESKTOP_API_HASH=${{ secrets.API_HASH }}

      - name: Create Tar
        run: |
          cd arch
          bash setup.sh
          tar -czvf materialgram-${{ env.TAGNAME }}.tar.gz usr

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: materialgram-${{ env.TAGNAME }}
          path: arch/materialgram-${{ env.TAGNAME }}.tar.gz

      - name: Upload artifact to Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.TAGNAME }}
          tag_name: ${{ env.TAGNAME }}
          token: ${{ secrets.PAT }}
          files: arch/materialgram-${{ env.TAGNAME }}.tar.gz

  trigger-workflow:
    runs-on: ubuntu-latest
    needs: linux
    steps:
     
      - name: Set PKGREL & TAGNAME
        run: |
          if [ "${{ github.event_name }}" == 'workflow_dispatch' ]; then
            PKGREL="${{ github.event.inputs.pkgrel }}"
          else
            PKGREL="1"
          fi
          echo "PKGREL=$PKGREL" >> $GITHUB_ENV
          echo "TAGNAME=$(curl -s "${{ github.api_url }}/repos/${{ github.repository }}/tags" | jq -r '.[0].name')" >> $GITHUB_ENV

      - name: Trigger repository dispatch event
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.OKsPAT }}
          repository: materialgram/materialgram-bin
          event-type: new-release
          client-payload: '{"tagname": "${{ env.TAGNAME }}", "pkgrel": "${{ env.PKGREL }}"}'
