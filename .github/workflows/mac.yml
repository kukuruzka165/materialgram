name: macOS

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

jobs:

  macos:
    name: macOS
    runs-on: macos-15-intel

    strategy:
      matrix:
        defines:
          - ""
    env:
      ONLY_CACHE: "false"
      PREPARE_PATH: "Telegram/build/prepare/prepare.py"

    steps:
      - name: Get repository name.
        run: echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

      - name: Clone.
        uses: actions/checkout@v5
        with:
          submodules: recursive
          path: ${{ env.REPO_NAME }}

      - name: First set up.
        run: |
          sudo chown -R `whoami`:admin /usr/local/share

          brew update
          brew upgrade || true
          brew install automake meson nasm ninja pkg-config

          # Disable spotlight.
          sudo mdutil -a -i off

          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer

      - name: ThirdParty cache.
        id: cache-third-party
        uses: actions/cache@v4
        with:
          path: ThirdParty
          key: ${{ runner.OS }}-third-party-${{ hashFiles(format('{0}/{1}', env.REPO_NAME, env.PREPARE_PATH)) }}
          restore-keys: ${{ runner.OS }}-third-party-

      - name: Libraries cache.
        id: cache-libs
        uses: actions/cache@v4
        with:
          path: Libraries
          key: ${{ runner.OS }}-libs-${{ hashFiles(format('{0}/{1}', env.REPO_NAME, env.PREPARE_PATH)) }}
          restore-keys: ${{ runner.OS }}-libs-

      - name: Libraries.
        run: |
          ./$REPO_NAME/Telegram/build/prepare/mac.sh silent

      - name: Free up some disk space.
        run: |
          cd Libraries
          find . -iname "*.dir" -exec rm -rf {} || true \;

      - name: Configure.
        run: |
          cd $REPO_NAME/Telegram
          ./configure.sh \
          -D CMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_ALLOWED=NO \
          -D TDESKTOP_API_ID=${{ secrets.API_ID }} \
          -D TDESKTOP_API_HASH=${{ secrets.API_HASH }} \
          -D DESKTOP_APP_DISABLE_AUTOUPDATE=OFF \
          -D CMAKE_EXE_LINKER_FLAGS="-Wl,-x"

      - name: materialgram build.
        if: env.ONLY_CACHE == 'false'
        run: |
          cd $REPO_NAME/out
          xcodebuild build -project Telegram.xcodeproj -scheme Telegram -destination "platform=macOS,name=Any Mac" -configuration Release

      - name: Move Intel artifact.
        run: |
          echo "ARTIFACT_NAME=materialgram_intel" >> $GITHUB_ENV
          cd $REPO_NAME/out/Release
          mkdir -p artifact_intel
          lipo -thin x86_64 materialgram.app/Contents/MacOS/materialgram -output materialgram_intel
          cp -R materialgram.app artifact_intel/
          mv materialgram_intel artifact_intel/materialgram.app/Contents/MacOS/materialgram
      - uses: actions/upload-artifact@v4
        name: Upload Intel artifact.
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.REPO_NAME }}/out/Release/artifact_intel/

      - name: Move Apple Silicon artifact.
        run: |
          echo "ARTIFACT_NAME=materialgram_applesilicon" >> $GITHUB_ENV
          cd $REPO_NAME/out/Release
          mkdir -p artifact_applesilicon
          lipo -thin x86_64 materialgram.app/Contents/MacOS/materialgram -output materialgram_applesilicon
          cp -R materialgram.app artifact_applesilicon/
          mv materialgram_applesilicon artifact_applesilicon/materialgram.app/Contents/MacOS/materialgram
      - uses: actions/upload-artifact@v4
        name: Upload Apple Silicon artifact.
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.REPO_NAME }}/out/Release/artifact_applesilicon/
