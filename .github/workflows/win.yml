name: Windows

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

jobs:

  windows:
    name: Windows
    runs-on: windows-latest

    strategy:
      matrix:
        arch: [x64]

    env:
      UPLOAD_ARTIFACT: "true"
      ONLY_CACHE: "false"
      PREPARE_PATH: "Telegram/build/prepare/prepare.py"

    defaults:
      run:
        shell: cmd

    steps:
      - name: Prepare directories.
        run: |
          mkdir %userprofile%\TBuild\Libraries
          mklink /d %GITHUB_WORKSPACE%\TBuild %userprofile%\TBuild
          echo TBUILD=%GITHUB_WORKSPACE%\TBuild>>%GITHUB_ENV%

      - name: Get repository name.
        shell: bash
        run: echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

      - name: Clone.
        uses: actions/checkout@v5
        with:
          submodules: recursive
          path: ${{ env.TBUILD }}\${{ env.REPO_NAME }}

      - name: First set up.
        shell: bash
        run: |
          DOCPATH=$TBUILD/$REPO_NAME/docs/building-win.md
          [ "${{ matrix.arch }}" != Win32 ] && DOCPATH=$TBUILD/$REPO_NAME/docs/building-win-${{ matrix.arch }}.md
          SDK="$(grep "SDK version" $DOCPATH | sed -r 's/.*\*\*(.*)\*\* SDK version.*/\1/')"
          echo "SDK=$SDK" >> $GITHUB_ENV

          echo "$(sha256sum $TBUILD/$REPO_NAME/$PREPARE_PATH | awk '{ print $1 }')" >> CACHE_KEY.txt
          echo "$SDK" >> CACHE_KEY.txt
          echo "CACHE_KEY=$(sha256sum CACHE_KEY.txt | awk '{ print $1 }')" >> $GITHUB_ENV

          echo "Configurate git for cherry-picks."
          git config --global user.email "you@example.com"
          git config --global user.name "Sample"

      - uses: ilammy/msvc-dev-cmd@v1.13.0
        name: Native Tools Command Prompt.
        with:
          arch: ${{ matrix.arch }}
          sdk: ${{ env.SDK }}

      - name: NuGet sources.
        run: |
          nuget sources Disable -Name "Microsoft Visual Studio Offline Packages"
          nuget sources Add -Source https://api.nuget.org/v3/index.json & exit 0

      - name: ThirdParty cache.
        id: cache-third-party
        uses: actions/cache@v4
        with:
          path: ${{ env.TBUILD }}\ThirdParty
          key: ${{ runner.OS }}-${{ matrix.arch }}-third-party-${{ env.CACHE_KEY }}
          restore-keys: ${{ runner.OS }}-${{ matrix.arch }}-third-party-

      - name: Libraries cache.
        id: cache-libs
        uses: actions/cache@v4
        with:
          path: ${{ env.TBUILD }}\Libraries
          key: ${{ runner.OS }}-${{ matrix.arch }}-libs-${{ env.CACHE_KEY }}
          restore-keys: ${{ runner.OS }}-${{ matrix.arch }}-libs-

      - name: Libraries.
        env:
          GYP_MSVS_OVERRIDE_PATH: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\'
          GYP_MSVS_VERSION: 2022
        run: |
          cd %TBUILD%
          %REPO_NAME%\Telegram\build\prepare\win.bat silent

      - name: Read configuration matrix.
        shell: bash
        run: |
          ARTIFACT_NAME="materialgram"

          ARCH=""
          if [ -n "${{ matrix.arch }}" ]; then
            case "${{ matrix.arch }}" in
              Win32) ARCH="x86";;
              *) ARCH="${{ matrix.arch }}";;
            esac
            echo "Architecture from matrix: $ARCH"
            ARTIFACT_NAME="${ARTIFACT_NAME}_${{ matrix.arch }}"
          fi

          GENERATOR=""
          if [ -n "${{ matrix.generator }}" ]; then
            GENERATOR="-G \"${{ matrix.generator }}\""
            echo "Generator from matrix: $GENERATOR"
            ARTIFACT_NAME="${ARTIFACT_NAME}_${{ matrix.generator }}"
          fi
          echo "TDESKTOP_BUILD_GENERATOR=$GENERATOR" >> $GITHUB_ENV

          [ -n "$GENERATOR" ] && ARCH=""
          echo "TDESKTOP_BUILD_ARCH=$ARCH" >> $GITHUB_ENV

          DEFINE=""
          if [ -n "${{ matrix.defines }}" ]; then
            DEFINE="-D ${{ matrix.defines }}=ON"
            echo "Define from matrix: $DEFINE"
            ARTIFACT_NAME="${ARTIFACT_NAME}_${{ matrix.defines }}"
          fi
          echo "TDESKTOP_BUILD_DEFINE=$DEFINE" >> $GITHUB_ENV

          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV

          API="-D TDESKTOP_API_ID=${{ secrets.API_ID }} -D TDESKTOP_API_HASH=${{ secrets.API_HASH }}"
          echo "TDESKTOP_BUILD_API=$API" >> $GITHUB_ENV

      - name: Free up some disk space.
        run: |
          cd %TBUILD%
          del /S Libraries\*.pdb
          del /S Libraries\*.pch
          del /S Libraries\*.obj

      - name: materialgram build.
        if: env.ONLY_CACHE == 'false'
        run: |
          cd %TBUILD%\%REPO_NAME%\Telegram

          call configure.bat ^
          %TDESKTOP_BUILD_GENERATOR% ^
          %TDESKTOP_BUILD_ARCH% ^
          %TDESKTOP_BUILD_API% ^
          -D CMAKE_CONFIGURATION_TYPES=MinSizeRel ^
          -D CMAKE_MSVC_DEBUG_INFORMATION_FORMAT= ^
          -D DESKTOP_APP_DISABLE_AUTOUPDATE=OFF ^
          %TDESKTOP_BUILD_DEFINE%

          cmake --build ..\out --config MinSizeRel --parallel

      - name: Move artifact.
        if: (env.UPLOAD_ARTIFACT == 'true') || (github.ref == 'refs/heads/nightly')
        run: |
          set OUT=%TBUILD%\%REPO_NAME%\out\MinSizeRel
          mkdir artifact
          move %OUT%\materialgram.exe artifact/
          move %OUT%\Updater.exe artifact/
      - uses: actions/upload-artifact@v4
        name: Upload artifact.
        if: (env.UPLOAD_ARTIFACT == 'true') || (github.ref == 'refs/heads/nightly')
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: artifact\
